select transaction_logs.created_at as created_at,  transaction_logs.id as ID, transaction_logs.trans_type, transaction_logs.trans_code, transaction_logs.txn_amount as txn_amount, transaction_logs.settlement_amount as settlement_amount, transaction_logs.stan as stan, transaction_logs.mcc as mcc, transaction_logs.channel as channel, transaction_logs.a_id as a_id, transaction_logs.m_id as m_id, transaction_logs.t_id as t_id, transaction_logs.rrn as rrn, transaction_logs.auth_code as auth_code, transaction_logs.location as location, transaction_logs.bin_number as bin_number, transaction_logs.happay_fee_amount as happay_fee_amount, bank_account_transfers.utr, 
CASE WHEN bank_account_transfers.status = 0 THEN 'pending' WHEN bank_account_transfers.status = 1 THEN 'Succuess' WHEN bank_account_transfers.status = 2 THEN 'Pending' WHEN bank_account_transfers.status = 4 THEN 'Failed' end as status_of_bank_transfers, 
json_extract_path_text(transaction_logs.request_body::json,'MERCHANT','NAME') as Merchant, entries.type as Txn_type from transaction_logs
LEFT JOIN entries ON (transaction_logs.id = entries.transaction_id and transaction_logs.source_account_id = entries.account_id)
LEFT JOIN accounts accounts__via__source_account_ ON transaction_logs.source_account_id = accounts__via__source_account_.id
LEFT JOIN bank_account_transfers on bank_account_transfers.txn_log_id = transaction_logs.id
WHERE (accounts__via__source_account_.user_id = '{{Table1Copy3.selectedRow.id}}' or accounts__via__source_account_.user_id = '{{Table1Copy2.selectedRow.id}}' or accounts__via__source_account_.user_id = '{{Table1CopyCopy.selectedRow.id}}' or accounts__via__source_account_.user_id = '{{Table1CopyCopyCopy.selectedRow.id}}' or accounts__via__source_account_.user_id = '{{Table1Copy1.selectedRow.id}}' or
accounts__via__source_account_.user_id ='{{Table1Copy1Copy.selectedRow.id}}') and transaction_logs.response_code in ('0') and transaction_logs.trans_type not in ('NULLIFY_CLEARED', 'NULLIFY_CLEARED_REVERSAL', 'AUTH_ADVICE');